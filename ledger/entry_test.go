package ledger

import (
	"testing"

	"github.com/btcsuite/btcd/chaincfg/chainhash"
	"github.com/stretchr/testify/assert"
)

func TestConvertBoolToByteTrue(t *testing.T) {
	assert.Equal(t, uint8(0x01), convertBoolToByte(true))
}

func TestConvertBoolToByteFalse(t *testing.T) {
	assert.Equal(t, uint8(0x00), convertBoolToByte(false))
}

func TestConvertByteToBoolZero(t *testing.T) {
	assert.Equal(t, false, convertByteToBool(0x00))
}

func TestConvertByteToBoolOne(t *testing.T) {
	assert.Equal(t, true, convertByteToBool(0x01))
}

func TestToPair(t *testing.T) {
	// Arrange
	hash, _ := chainhash.NewHashFromStr("f4b5c0df7339a7ad1bc6b2ae57613af2d6c262c5799f560007c95d3a1bc007f1")
	entry := &Entry{
		Address: []byte("0xf993dbd84dc713862eb6ead40deff0f2e8bed2e4"),
		TxHash:  hash,
		In:      true,
		Value:   int64(1119393900022),
	}

	key := []byte{
		0x30, 0x78, 0x66, 0x39, 0x39, 0x33, 0x64, 0x62,
		0x64, 0x38, 0x34, 0x64, 0x63, 0x37, 0x31, 0x33,
		0x38, 0x36, 0x32, 0x65, 0x62, 0x36, 0x65, 0x61,
		0x64, 0x34, 0x30, 0x64, 0x65, 0x66, 0x66, 0x30,
		0x66, 0x32, 0x65, 0x38, 0x62, 0x65, 0x64, 0x32,
		0x65, 0x34, 0x01, 0xf1, 0x07, 0xc0, 0x1b, 0x3a,
		0x5d, 0xc9, 0x07, 0x00, 0x56, 0x9f, 0x79, 0xc5,
		0x62, 0xc2, 0xd6, 0xf2, 0x3a, 0x61, 0x57, 0xae,
		0xb2, 0xc6, 0x1b, 0xad, 0xa7, 0x39, 0x73, 0xdf,
		0xc0, 0xb5, 0xf4,
	}
	value := []byte{0xf6, 0x65, 0x13, 0xa1, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00}

	// Act
	k, v := toPair(entry)

	// Assert
	assert.Equal(t, key, k)
	assert.Equal(t, value, v)
}

func TestToEntry(t *testing.T) {
	// Arrange
	hash, _ := chainhash.NewHashFromStr("b28a89449e1a427248921cd3eff0fd35cef67e95b72774645494d0948ca3174f")
	entry := &Entry{
		Address: []byte("0xac60E10c4f29c4B8D7Ce5D3F01Ee4Cd631447CD0"),
		TxHash:  hash,
		In:      false,
		Value:   int64(32592308582),
	}

	key := []byte{
		0x30, 0x78, 0x61, 0x63, 0x36, 0x30, 0x45, 0x31,
		0x30, 0x63, 0x34, 0x66, 0x32, 0x39, 0x63, 0x34,
		0x42, 0x38, 0x44, 0x37, 0x43, 0x65, 0x35, 0x44,
		0x33, 0x46, 0x30, 0x31, 0x45, 0x65, 0x34, 0x43,
		0x64, 0x36, 0x33, 0x31, 0x34, 0x34, 0x37, 0x43,
		0x44, 0x30, 0x00, 0x4f, 0x17, 0xa3, 0x8c, 0x94,
		0xd0, 0x94, 0x54, 0x64, 0x74, 0x27, 0xb7, 0x95,
		0x7e, 0xf6, 0xce, 0x35, 0xfd, 0xf0, 0xef, 0xd3,
		0x1c, 0x92, 0x48, 0x72, 0x42, 0x1a, 0x9e, 0x44,
		0x89, 0x8a, 0xb2,
	}
	value := []byte{0x66, 0x29, 0xa7, 0x96, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,}

	// Act
	e, err := ToEntry(key, value)

	// Assert
	assert.Equal(t, err, nil)
	assert.Equal(t, entry, e)
}
